#pragma once
#include<vector>
#include<iostream>
using namespace std;

/// <summary>
/// (Возможно, будет реализован в будущем)
/// Класс Bound отвечает за хранение границ у произвольной области и, следовательно,
/// должен задаваться произвольно для каждого класса изнутри.
/// </summary>
class Bound;
/// <summary>
/// Базовый класс BaseArea. Предназначен для создания (произвольной) области
/// (произвольной) размерности. На данный момент может служить для создания параллелипипедов.
/// 
/// Есть желание создать какой-нибудь класс по типу Bound, который был бы произвольным для каждого
/// наследуемого класса и содержал главные параметры для обусловливания границ (радиус и центр у
/// шара, положение одной точки и расстояние между точками у регулярных симплексов и так далее).
/// 
/// Пока рудиментарен.
/// </summary>
class BaseArea {
public:
	/// <summary>
	/// Виртуальный метод, который возвращает две точки в произвольном пространстве,
	/// которые выступают границами объекта
	/// </summary>
	/// <returns></returns>
	virtual vector<pair<double, double>> GetBounds() const = 0;

	/// <summary>
	/// Виртуальный метод для проверки расположения точки внутри области
	/// </summary>
	/// <param name="point"></param>
	/// <returns></returns>
	virtual bool IsInside(const vector<double>& point) const = 0;
protected:
};